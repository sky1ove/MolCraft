# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Chemprop_colab_demo.ipynb.

# %% auto 0
__all__ = ['train_file', 'predict_file', 'predict_smiles']

# %% ../nbs/Chemprop_colab_demo.ipynb 4
import chemprop, pandas as pd, numpy as np
from .utils import *

# %% ../nbs/Chemprop_colab_demo.ipynb 13
def train_file(train_file: str, # filename
               valid_file:str,
               test_file:str,
               task: str, # "regression" or "classification"
               ckp_folder: str = 'ckp', # checkpoint folder name
               epochs: int=30, # default for chemprop is 30
               seed: int = 0
               ):
    "Use Chemprop to train a file with first column as smiles, and the rest columns as target, with header row"
    
    assert task in ["regression","classification"], "task must be either 'regression' or 'classification'"
    
    arguments = [
    '--data_path', train_file,
    '--dataset_type', task,
    '--save_dir', ckp_folder,
    '--epochs', str(epochs),
    '--seed', str(seed),
    '--save_smiles_splits',
    '--quiet', #  quiet

    # extra metrics for classification
    # '--extra_metrics', 'prc-auc',

    # for splitting
    '--split_type', 'scaffold_balanced',


    # if customize split, need to indicate valid and test file
    # '--separate_val_path', valid_file,
    # '--separate_test_path', test_file,


    # for generating RDKit features, comment out if not needed
    # '--features_generator', 'rdkit_2d_normalized',
    # '--no_features_scaling'

    # alternatively, generate features in advance
    # '--features_path', <csv/npy file>, '--no_features_scaling'

    # if hyperopt before
    # '--config_path', <config path>
    ]

    args = chemprop.args.TrainArgs().parse_args(arguments)
    mean_score, std_score = chemprop.train.cross_validate(args=args, train_func=chemprop.train.run_training)

    return mean_score,std_score

# %% ../nbs/Chemprop_colab_demo.ipynb 17
def predict_file(input_file:str, # filename, with first column as smiles
                 ckp_folder: str = 'ckp', # checkpoint folder name
                 return_df=True
                 ):

    "Load trained models and make predictions on csv file that contains SMILES in the first column"
    arguments = [
    '--test_path', input_file,
    '--preds_path', '/dev/null',
    '--checkpoint_dir', ckp_folder,

    # for generating RDKit features, comment out if not needed
    # '--features_generator', 'rdkit_2d_normalized', # for generating RDKit features
    # '--no_features_scaling',

    ]

    args = chemprop.args.PredictArgs().parse_args(arguments)
    preds = chemprop.train.make_predictions(args=args)

    preds = np.array(preds).squeeze()

    if return_df:
        preds = pd.DataFrame(preds)
        preds.columns = 'pred_'+preds.columns.astype(str)
        df = pd.read_csv(input_file)
        df = pd.concat([df,preds],axis=1)
        return df

    else:
        return preds

# %% ../nbs/Chemprop_colab_demo.ipynb 23
def predict_smiles(smiles: list,  # need to in format: [['CCC'], ['CCCC'], ['OCC']]
                   ckp_folder: str='ckp', # checkpoint folder name
                   ):

    "Load trained models and make predictions on list of SMILES"

    arguments = [
      '--test_path', '/dev/null',
      '--preds_path', '/dev/null',
      '--checkpoint_dir', ckp_folder,

      # for generating RDKit features
      # '--features_generator', 'rdkit_2d_normalized',
      # '--no_features_scaling'

      ]

    args = chemprop.args.PredictArgs().parse_args(arguments)
    model_objects = chemprop.train.load_model(args=args)

    preds = chemprop.train.make_predictions(args=args, smiles=smiles, model_objects=model_objects)

    return preds
