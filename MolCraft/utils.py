# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_utils.ipynb.

# %% auto 0
__all__ = ['preprocess_smiles', 'preprocess_smi_df']

# %% ../nbs/01_utils.ipynb 4
import pandas as pd, numpy as np

from rdkit import Chem
from rdkit.Chem import SaltRemover, MolStandardize

# %% ../nbs/01_utils.ipynb 5
def preprocess_smiles(smiles):
    
    "Standardize SMILES by: 1) get the largest fragment, 2) normalize, 3) neutralization"
    
    try:
        # Convert to a molecule object
        mol = Chem.MolFromSmiles(smiles)
        if not mol:
            return None

        # Standardization, get largest fragment
        lfc = MolStandardize.fragment.LargestFragmentChooser()
        mol = lfc.choose(mol)

        # Normalize
        norm = MolStandardize.normalize.Normalizer()
        mol = norm.normalize(mol)

        # # Desalt, duplicates with largest fragment
        # remover = SaltRemover.SaltRemover()
        # mol = remover.StripMol(mol, dontRemoveEverything=True)

        # Neutralization
        uncharger = MolStandardize.charge.Uncharger()
        mol = uncharger.uncharge(mol)

        # Convert back to SMILES
        standardized_smiles = Chem.MolToSmiles(mol, isomericSmiles=True)
        
        return standardized_smiles
    
    except Exception as e:
        print(f"An error occurred for SMILES {smiles}: {e}")
        return None

# %% ../nbs/01_utils.ipynb 6
def preprocess_smi_df(df,smi_col):
    df = df.copy()
    print('before processing:',df.shape)
    df[smi_col] = df[smi_col].apply(preprocess_smiles)
    df = df.dropna(subset=smi_col).reset_index(drop=True)
    print('after processing:',df.shape)
    return df
